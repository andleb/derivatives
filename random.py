# -*- coding: utf-8 -*-
"""
Created on Fri Mar 29 06:37:35 2019

@author: Andrej Leban
"""

import numpy as np
import pandas as pd
import scipy as sp

import matplotlib.pyplot as plt

import csv

# the data is generated by enabling the macro DUMPINTERMEDIATE in CMake

# intermediate dists
a = np.array(list(map(float, list(csv.reader(open("uniforms")))[0])))
plt.hist(a, bins=10, density=True)

plt.figure()
b = np.array(list(map(float, list(csv.reader(open("gaussians")))[0])))
b[b == -np.inf] = -np.finfo(float).max
b[b == np.inf] = np.finfo(float).max
bhist = b[b > -1000]
bhist = bhist[bhist < 1000]
plt.hist(bhist, bins=1000, density=True)

# convergence

with open("PM", 'r') as file:
    pm = np.array([list(map(float, row)) for row in
                   list(csv.reader(file, delimiter=' '))])

with open("PM-AT", 'r') as file:
    pmat = np.array([list(map(float, row)) for row in
                     list(csv.reader(file, delimiter=' '))])

with open("MT", 'r') as file:
    mt = np.array([list(map(float, row)) for row in
                   list(csv.reader(file, delimiter=' '))])

with open("MT-AT", 'r') as file:
    mtat = np.array([list(map(float, row)) for row in
                     list(csv.reader(file, delimiter=' '))])

plt.figure()
plt.plot(pm[:, 0], pm[:, 1], pmat[:, 0], pmat[:, 1],
         mt[:, 0], mt[:, 1], mtat[:, 0], mtat[:, 1])
plt.ylim(0, 200)
plt.xscale('log')
plt.legend(["pm", "pm-at", "mt", "mt-at"])

# convergence - residuals
plt.figure()
plt.plot(pm[:, 0], np.abs(pm[-1, 1] - pm[:, 1]),
         pmat[:, 0], np.abs(pmat[-1, 1] - pmat[:, 1]),
         mt[:, 0], np.abs(mt[-1, 1] - mt[:, 1]),
         mtat[:, 0], np.abs(mtat[-1, 1] - mtat[:, 1]))
plt.ylim(0, 200)
plt.xscale('log')
plt.legend(["pm", "pm-at", "mt", "mt-at"])

# metric - integral under the logscale curve
print("Sums of residuals are:")
print(np.sum(np.abs(pm[-1, 1] - pm[:, 1])),
      np.sum(np.abs(pmat[-1, 1] - pmat[:, 1])),
      np.sum(np.abs(mt[-1, 1] - mt[:, 1])),
      np.sum(np.abs(mtat[-1, 1] - mtat[:, 1])))




